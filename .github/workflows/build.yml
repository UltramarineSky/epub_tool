name: Build And Release

on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - '**.yml'
  workflow_dispatch:
    inputs:
      release:
        description: 'Create a new release'
        required: true
        default: true
        type: boolean
      version:
        description: 'Release version'
        required: true
        default: '2025.03.01.v1'
      body:
        description: 'Release body text'
        required: true
        default: '详情请查看更新日志；Epub_Tool_TKUI为可视化程序，不再支持命令行程序。有需要请直接下载python执行源码。'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: # os: [ubuntu-latest, macos-latest, windows-latest] 暂时去除Ubuntu系统
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set release outputs
      id: set_release_outputs
      run: |
        if [ "${{ github.event.inputs.release }}" == "true" ]; then
          echo "TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "BODY=${{ github.event.inputs.body }}" >> $GITHUB_ENV
        else
          echo "TAG=$(date +'%Y.%m.%d.v2')" >> $GITHUB_ENV
          echo "BODY=详情请查看更新日志；Epub_Tool_TKUI为可视化程序，Epub_Tool_Console为命令行程序。" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13.1

    - name: Install Pyinstaller
      run: |
        python -m pip install pyinstaller
        python -m pip install -r requirements.txt

    - name: Build the executables
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          pyinstaller -w -i ./img/icon.icns Epub_Tool_TKUI.py -n Epub_Tool_TKUI;
        else
          pyinstaller -w -F -i ./img/icon.ico  Epub_Tool_TKUI.py -n Epub_Tool_TKUI;
        fi
      shell: bash

    - name: Rename artifacts with OS prefix (macOS) # Epub_Tool_TKUI.app为文件夹，zip压缩
      if: matrix.os == 'macos-latest'
      run: |
        brew install create-dmg
        cd ./dist
        create-dmg \
          --volname "Epub_Tool_TKUI" \
          --window-pos 400 200 \
          --window-size 660 400 \
          --icon-size 100 \
          --icon "Epub_Tool_TKUI.app" 160 185 \
          --hide-extension "Epub_Tool_TKUI.app"\
          --app-drop-link 500 185 \
          --no-internet-enable \
          "./Epub_Tool_TKUI.dmg" \
          "./Epub_Tool_TKUI.app";
        rm -rf ./Epub_Tool_TKUI.app;
        rm -rf ./Epub_Tool_TKUI;
        cd ..
        for file in dist/*; do
          mv "$file" "dist/${{ runner.os }}_$(basename "$file")"
        done
      shell: bash

    # 无Ubuntu系统，暂时不知道Ubuntu版本下打包的可执行文件是什么格式、是否可用
    # - name: Rename artifacts with OS prefix (Ubuntu)
    #   if: matrix.os == 'ubuntu-latest'
    #   run: |
    #     for file in dist/*; do
    #       mv "$file" "dist/${{ runner.os }}_$(basename "$file")"
    #     done
    #   shell: bash

    - name: Rename artifacts with OS prefix (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Get-ChildItem -Path dist | Rename-Item -NewName { '${{ runner.os }}_' + $_.Name }
      shell: pwsh

    # - name: Create zip archive (Windows)
    #   if: matrix.os == 'windows-latest'
    #   run: |
    #     Compress-Archive -Path dist\* -DestinationPath "dist\${{ runner.os }}_all.zip"
    #   shell: pwsh

    # - name: Create tar.gz archive (Linux and macOS)
    #   if: matrix.os != 'windows-latest'
    #   run: |
    #     tar -czvf "${{ runner.os }}_all.tar.gz" -C dist $(ls dist)
    #     mv "${{ runner.os }}_all.tar.gz" dist/
    #   shell: bash

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ env.TAG }}
        name: ${{ env.TAG }}
        body: ${{ env.BODY }}
        artifacts: 'dist/*'
        allowUpdates: true
        makeLatest: true